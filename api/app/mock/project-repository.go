// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/takutakuaoao/mose/api/app"
	"sync"
)

// Ensure, that ProjectRepositoryMock does implement app.ProjectRepository.
// If this is not the case, regenerate this file with moq.
var _ app.ProjectRepository = &ProjectRepositoryMock{}

// ProjectRepositoryMock is a mock implementation of app.ProjectRepository.
//
//	func TestSomethingThatUsesProjectRepository(t *testing.T) {
//
//		// make and configure a mocked app.ProjectRepository
//		mockedProjectRepository := &ProjectRepositoryMock{
//			RegisterFunc: func(title string, loginUserID int64) int64 {
//				panic("mock out the Register method")
//			},
//		}
//
//		// use mockedProjectRepository in code that requires app.ProjectRepository
//		// and then make assertions.
//
//	}
type ProjectRepositoryMock struct {
	// RegisterFunc mocks the Register method.
	RegisterFunc func(title string, loginUserID int64) int64

	// calls tracks calls to the methods.
	calls struct {
		// Register holds details about calls to the Register method.
		Register []struct {
			// Title is the title argument value.
			Title string
			// LoginUserID is the loginUserID argument value.
			LoginUserID int64
		}
	}
	lockRegister sync.RWMutex
}

// Register calls RegisterFunc.
func (mock *ProjectRepositoryMock) Register(title string, loginUserID int64) int64 {
	if mock.RegisterFunc == nil {
		panic("ProjectRepositoryMock.RegisterFunc: method is nil but ProjectRepository.Register was just called")
	}
	callInfo := struct {
		Title       string
		LoginUserID int64
	}{
		Title:       title,
		LoginUserID: loginUserID,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	return mock.RegisterFunc(title, loginUserID)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//
//	len(mockedProjectRepository.RegisterCalls())
func (mock *ProjectRepositoryMock) RegisterCalls() []struct {
	Title       string
	LoginUserID int64
} {
	var calls []struct {
		Title       string
		LoginUserID int64
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}
